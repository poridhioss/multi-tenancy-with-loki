apiVersion: v1
kind: Namespace
metadata:
  name: flask-app
  labels:
    name: flask-app
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: flask-app-config
  namespace: flask-app
data:
  app.py: |
    from flask import Flask, jsonify, request
    import json
    import os
    from datetime import datetime

    app = Flask(__name__)

    # Ensure log directory exists
    log_dir = '/var/log/app'
    os.makedirs(log_dir, exist_ok=True)
    log_file = os.path.join(log_dir, 'flask-app.log')

    def log_message(level, message):
        log_entry = {
            "timestamp": datetime.utcnow().isoformat() + "Z",
            "level": level,
            "message": message,
            "service": "flask-app",
            "tenant": "flask-tenant"
        }
        
        # Write to log file
        with open(log_file, 'a') as f:
            f.write(json.dumps(log_entry) + '\n')
        
        print(f"[{level}] {message}")

    @app.route('/')
    def home():
        log_message("info", "Flask homepage accessed")
        return jsonify({
            "message": "Hello from Flask!",
            "timestamp": datetime.utcnow().isoformat() + "Z",
            "service": "flask-app"
        })

    @app.route('/health')
    def health():
        log_message("info", "Flask health check accessed")
        return jsonify({
            "status": "healthy",
            "service": "flask-app",
            "timestamp": datetime.utcnow().isoformat() + "Z"
        })

    @app.route('/error')
    def error():
        log_message("error", "Flask test error occurred")
        return jsonify({
            "error": "Flask test error",
            "service": "flask-app",
            "timestamp": datetime.utcnow().isoformat() + "Z"
        }), 500

    @app.route('/products', methods=['POST'])
    def create_product():
        data = request.get_json()
        product_name = data.get('name', 'Unknown')
        log_message("info", f"Product created: {product_name}")
        return jsonify({
            "message": f"Product {product_name} created",
            "service": "flask-app",
            "timestamp": datetime.utcnow().isoformat() + "Z"
        })

    if __name__ == '__main__':
        log_message("info", "Flask server started on port 5000")
        app.run(host='0.0.0.0', port=5000, debug=False)
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: flask-app
  namespace: flask-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: flask-app
  template:
    metadata:
      labels:
        app: flask-app
    spec:
      containers:
      - name: flask-app
        image: python:3.9-slim
        ports:
        - containerPort: 5000
        command: ["/bin/sh"]
        args:
          - -c
          - |
            pip install flask
            mkdir -p /var/log/app
            cp /config/app.py /app.py
            python /app.py
        volumeMounts:
        - name: config-volume
          mountPath: /config
        - name: log-volume
          mountPath: /var/log/app
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
      volumes:
      - name: config-volume
        configMap:
          name: flask-app-config
      - name: log-volume
        hostPath:
          path: /var/log/flask-app
          type: DirectoryOrCreate
---
apiVersion: v1
kind: Service
metadata:
  name: flask-app-service
  namespace: flask-app
spec:
  selector:
    app: flask-app
  ports:
  - port: 5000
    targetPort: 5000
    nodePort: 30500
  type: NodePort