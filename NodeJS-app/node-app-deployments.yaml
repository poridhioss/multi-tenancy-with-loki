apiVersion: v1
kind: Namespace
metadata:
  name: nodejs-app
  labels:
    name: nodejs-app
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nodejs-app-config
  namespace: nodejs-app
data:
  app.js: |
    const express = require('express');
    const fs = require('fs');
    const path = require('path');

    const app = express();
    app.use(express.json());

    // Ensure log directory exists
    const logDir = '/var/log/app';
    if (!fs.existsSync(logDir)) {
        fs.mkdirSync(logDir, { recursive: true });
    }

    // Simple logger
    function log(level, message) {
        const logEntry = {
            timestamp: new Date().toISOString(),
            level: level,
            message: message,
            service: 'nodejs-app',
            tenant: 'nodejs-tenant'
        };
        
        // Write to file for Fluent Bit
        fs.appendFileSync(path.join(logDir, 'nodejs-app.log'), JSON.stringify(logEntry) + '\n');
        console.log(`[${level}] ${message}`);
    }

    // Routes
    app.get('/', (req, res) => {
        log('info', 'NodeJS homepage accessed');
        res.json({ 
            message: 'Hello from Node.js!', 
            timestamp: new Date().toISOString(),
            service: 'nodejs-app'
        });
    });

    app.get('/health', (req, res) => {
        log('info', 'NodeJS health check accessed');
        res.json({ 
            status: 'healthy', 
            timestamp: new Date().toISOString(),
            service: 'nodejs-app'
        });
    });

    app.get('/error', (req, res) => {
        log('error', 'NodeJS test error occurred');
        res.status(500).json({ 
            error: 'NodeJS test error', 
            timestamp: new Date().toISOString(),
            service: 'nodejs-app'
        });
    });

    app.post('/users', (req, res) => {
        const { name } = req.body;
        log('info', `User created: ${name}`);
        res.json({ 
            message: `User ${name} created`, 
            timestamp: new Date().toISOString(),
            service: 'nodejs-app'
        });
    });

    app.listen(3000, () => {
        log('info', 'NodeJS server started on port 3000');
        console.log('Server running on http://localhost:3000');
    });

  package.json: |
    {
      "name": "nodejs-app",
      "version": "1.0.0",
      "main": "app.js",
      "dependencies": {
        "express": "^4.18.2"
      }
    }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nodejs-app
  namespace: nodejs-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nodejs-app
  template:
    metadata:
      labels:
        app: nodejs-app
    spec:
      containers:
      - name: nodejs-app
        image: node:18-alpine
        ports:
        - containerPort: 3000
        command: ["/bin/sh"]
        args:
          - -c
          - |
            mkdir -p /app
            cp /config/package.json /app/package.json
            cp /config/app.js /app/app.js
            cd /app
            npm install
            mkdir -p /var/log/app
            node app.js
        volumeMounts:
        - name: config-volume
          mountPath: /config
        - name: log-volume
          mountPath: /var/log/app
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
      volumes:
      - name: config-volume
        configMap:
          name: nodejs-app-config
      - name: log-volume
        hostPath:
          path: /var/log/nodejs-app
          type: DirectoryOrCreate
---
apiVersion: v1
kind: Service
metadata:
  name: nodejs-app-service
  namespace: nodejs-app
spec:
  selector:
    app: nodejs-app
  ports:
  - port: 3000
    targetPort: 3000
    nodePort: 30400
  type: NodePort